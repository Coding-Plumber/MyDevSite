{
  "version": "https://jsonfeed.org/version/1",
  "title": "Kyle McAndrew",
  "home_page_url": "http://localhost:1313/",
  "feed_url": "http://localhost:1313/feed.json",
  "description": "Just somebody trying to learn a thing or two",
  "favicon": "http://localhost:1313//assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Kyle McAndrew",
    "url": "http://localhost:1313/"
  },
  "items": [
    
    

    
    {
      "id": "16f03fc120431c614e156d12d7a222a74ef3ebf2",
      "title": "How I got into the software industry",
      "summary": "",
      "content_text": "I began to write this as what i have learnt so far in my transition to the industry but i felt i should write up on how i actually got here and the post became longer than i would have liked so I\u0026rsquo;ve decided to split them up and will do a follow up of my life in the industry so far.\nCrossroads I had two choices at school of what I wanted to do, one being to continue education and go into computer science and the other becoming a plumber. At the time, I felt I didn\u0026rsquo;t enjoy education and learning overall (which would later be because of suspected ADD) and I became a plumber.\nMy journey as a Plumber I did an apprenticeship in commercial and industrial Heating \u0026amp; Ventilation, then went into doing residential work in plumbing and gas before becoming self-employed.\nI did well self-employed and in fact still do some work for my existing customer base, but something didn\u0026rsquo;t feel right.\nI\u0026rsquo;ve always enjoyed work and been passionate about it. Whilst being a plumber, I picked up other skills such as:\nJoinery Plastering Electrics Building This felt different from school because I wanted to absorb as much knowledge as I could. I was passionate about making and creating things and spent most of my free time outside of work learning other plumbing tricks and other trades.\nSide note: I hate painting, it\u0026rsquo;s one of the few jobs in the industry I just found extremely boring to do.\nThe Turning Point Eventually, though, I was going to work and the initial self-employed excitement had worn off. Slowly, jobs such as hanging radiators or the more typical plumbing work became boring and routine.\nThe best way to describe it would be like driving a car: at first you focus on everything but then it just all becomes one and you don\u0026rsquo;t need to think about changing gear etc.\nI would listen to podcasts and later realised that if I can listen to a podcast whilst working, my brain isn\u0026rsquo;t engaged enough.\nDiscovering Programming At the time I hadn\u0026rsquo;t figured out the root issue of why i no longer enjoyed work and continued on and with not enjoying it for the first time in over 10 years. However one thing at the time i thought i needed or wanted was a website, I looked into some of the self-built websites and they didn\u0026rsquo;t have some of the styling or features I wanted so I thought I\u0026rsquo;d look into building one myself. I initially went down the themes and WordPress route but again I didn\u0026rsquo;t like the feeling of being restricted so I started to research how websites are built to see if it was something i would be interested in. During this research I came across The Odin Project which is an Open Source Web Development curriculum which was highly well regarded. I started the course and started to really enjoy it. Being self-employed, I could dictate my own hours and I started to take less and less work on because I was fixated on the digital world of building stuff. I wanted to learn more. My curiosity eventually took me away from web development and I came across another course \u0026lsquo;Harvards CS50- Introduction to Computer Science\u0026rsquo; which is the entry-level CS course they teach at Harvard taught by David Malan which starts with using the programming language C, teaches you about algorithms, memory, data structures, Python, SQL, Web (highly recommend it).\nThe Transition At this point, I was working the minimum amount to cover my bills but wanting to program and learn more with all my available free time. I now knew I wanted to pursue this as a career and looked into the best ways into the industry, what I was told my best chances were to get in was through web development so I continued with The Odin Project. Whilst following this course, I began to get adverts for \u0026lsquo;bootcamps\u0026rsquo; which caught my attention so I looked into this as an option. I ended up joining and completing \u0026lsquo;Northcoders\u0026rsquo; and then getting my first paid job as a full stack software developer.\nReflections It was the correct decision. I enjoy going to work again, I love learning about everything related to software. There\u0026rsquo;s too much to learn in my lifetime which means I will never hit a skill ceiling which I felt I had hit in my career as a plumber.\nFor me, it was the perfect switch. I get paid to learn and I still enjoy coding in my spare time just as much as before I started. My goals have changed since starting though, but after a year of trying multiple software avenues, I now know which areas I want to pursue.\nI will do a separate post for what I have learnt during my time as a software engineer so far because I\u0026rsquo;m conscious of this getting too long.\n",
      "content_html": "\u003cp\u003eI began to write this as what i have learnt so far in my transition to the industry but i felt i should write up on how i actually got here and the post became longer than i would have liked so I\u0026rsquo;ve decided to split them up and will do a follow up of my life in the industry so far.\u003c/p\u003e\n\u003ch2 id=\"crossroads\"\u003eCrossroads\u003c/h2\u003e\n\u003cp\u003eI had two choices at school of what I wanted to do, one being to continue education and go into computer science and the other becoming a plumber. At the time, I felt I didn\u0026rsquo;t enjoy education and learning overall (which would later be because of suspected ADD) and I became a plumber.\u003c/p\u003e\n\u003ch2 id=\"my-journey-as-a-plumber\"\u003eMy journey as a Plumber\u003c/h2\u003e\n\u003cp\u003eI did an apprenticeship in commercial and industrial Heating \u0026amp; Ventilation, then went into doing residential work in plumbing and gas before becoming self-employed.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI did well self-employed and in fact still do some work for my existing customer base, but something didn\u0026rsquo;t feel right.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI\u0026rsquo;ve always enjoyed work and been passionate about it. Whilst being a plumber, I picked up other skills such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJoinery\u003c/li\u003e\n\u003cli\u003ePlastering\u003c/li\u003e\n\u003cli\u003eElectrics\u003c/li\u003e\n\u003cli\u003eBuilding\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis felt different from school because I wanted to absorb as much knowledge as I could. I was passionate about making and creating things and spent most of my free time outside of work learning other plumbing tricks and other trades.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSide note:\u003c/strong\u003e I hate painting, it\u0026rsquo;s one of the few jobs in the industry I just found extremely boring to do.\u003c/p\u003e\n\u003ch2 id=\"the-turning-point\"\u003eThe Turning Point\u003c/h2\u003e\n\u003cp\u003eEventually, though, I was going to work and the initial self-employed excitement had worn off. Slowly, jobs such as hanging radiators or the more typical plumbing work became boring and routine.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe best way to describe it would be like driving a car: at first you focus on everything but then it just all becomes one and you don\u0026rsquo;t need to think about changing gear etc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI would listen to podcasts and later realised that if I can listen to a podcast whilst working, my brain isn\u0026rsquo;t engaged enough.\u003c/p\u003e\n\u003ch2 id=\"discovering-programming\"\u003eDiscovering Programming\u003c/h2\u003e\n\u003cp\u003eAt the time I hadn\u0026rsquo;t figured out the root issue of why i no longer enjoyed work and continued on and with not enjoying it for the first time in over 10 years. However one thing at the time i thought i needed or wanted was a website, I looked into some of the self-built websites and they didn\u0026rsquo;t have some of the styling or features I wanted so I thought I\u0026rsquo;d look into building one myself. I initially went down the themes and WordPress route but again I didn\u0026rsquo;t like the feeling of being restricted so I started to research how websites are built to see if it was something i would be interested in. During this research I came across \u003ca href=\"https://www.theodinproject.com/\"\u003eThe Odin Project\u003c/a\u003e which is an Open Source Web Development curriculum which was highly well regarded. I started the course and started to really enjoy it. Being self-employed, I could dictate my own hours and I started to take less and less work on because I was fixated on the digital world of building stuff. I wanted to learn more. My curiosity eventually took me away from web development and I came across another course \u0026lsquo;\u003ca href=\"https://pll.harvard.edu/course/cs50-introduction-computer-science\"\u003eHarvards CS50\u003c/a\u003e- Introduction to Computer Science\u0026rsquo; which is the entry-level CS course they teach at Harvard taught by David Malan which starts with using the programming language C, teaches you about algorithms, memory, data structures, Python, SQL, Web (highly recommend it).\u003c/p\u003e\n\u003ch2 id=\"the-transition\"\u003eThe Transition\u003c/h2\u003e\n\u003cp\u003eAt this point, I was working the minimum amount to cover my bills but wanting to program and learn more with all my available free time. I now knew I wanted to pursue this as a career and looked into the best ways into the industry, what I was told my best chances were to get in was through web development so I continued with The Odin Project. Whilst following this course, I began to get adverts for \u0026lsquo;bootcamps\u0026rsquo; which caught my attention so I looked into this as an option. I ended up joining and completing \u0026lsquo;Northcoders\u0026rsquo; and then getting my first paid job as a full stack software developer.\u003c/p\u003e\n\u003ch2 id=\"reflections\"\u003eReflections\u003c/h2\u003e\n\u003cp\u003eIt was the correct decision. I enjoy going to work again, I love learning about everything related to software. There\u0026rsquo;s too much to learn in my lifetime which means I will never hit a skill ceiling which I felt I had hit in my career as a plumber.\u003c/p\u003e\n\u003cp\u003eFor me, it was the perfect switch. I get paid to learn and I still enjoy coding in my spare time just as much as before I started. My goals have changed since starting though, but after a year of trying multiple software avenues, I now know which areas I want to pursue.\u003c/p\u003e\n\u003cp\u003eI will do a separate post for what I have learnt during my time as a software engineer so far because I\u0026rsquo;m conscious of this getting too long.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/my-journey-into-software/",
      "date_published": "25086-25-09T80:2525:00+00:00",
      "date_modified": "25086-25-09T80:2525:00+00:00",
      "author": {
        "name": "Kyle McAndrew",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "df46893529ace635903992effd3b87bb996f6af9",
      "title": "Two Keyboards!?",
      "summary": "",
      "content_text": "Exploring Ergonomic Split Keyboards: My Journey with the Glove 80 Over the last few months, I started to look into ergonomic split keyboards and a few keyboards kept coming up:\nKinesis Advantage 360 Glove 80 ZSA Moonlander Why Though? As a self-employed plumber who also works as a software engineer, I began noticing fatigue in my wrists. After a decade of repetitive movements like using screwdrivers, I started to worry about carpal tunnel syndrome (CTS). I researched ways to prevent this because I really enjoy my job and wanted to plan for longevity. I came across an article that seems to corroborate this:\nPubMed research on ergonomic keyboards\nThe research suggests that fixed-split ergonomic keyboards can reduce pain and the likelihood of developing musculoskeletal disorders in typists over extended use. It seems that the forced position of a normal keyboard can increase muscle strain, whereas an ergonomic or split ergonomic keyboard can alleviate this.\nGlove 80 The Glove 80 caught my eye. They kind of look like goalkeeper gloves to me every time I take a step back and look at them.\nI decided on the Glove 80 because of its excellent reviews. Some complaints mentioned they're better suited for larger hands, which worked in my favor as I was worried about the opposite.\nIt has a natural curve and feels incredibly comfortable. You can even 'tent' it, raising the legs to a 45-degree angle, a 90-degree angle, or attach it to your chair with accessories.\nCost The Glove 80 is fairly expensive, costing me £322. However, you pay for what you get, and can you put a price on your health? As a plumber, I always bought high-quality tools, and this keyboard feels well-made. It has reignited my enjoyment of typing and motivated me to relearn touch typing.\nIt comes in two colors (white or dark gray) and offers 4 key choices:\nKailh Choc v1 Brown Tactile Kailh Choc v1 Red Linear 50gf Kailh Choc v1 Red Pro Linear 35gf Kailh Choc v1 White clicky You can also order one with unsoldered keys if you have soldering experience and prefer custom keys.\nQWERTY \u0026 Engram This is where I probably messed up a little. After 20 years of using QWERTY, I decided to explore alternative layouts while switching keyboards.\nWhy is QWERTY the way it is? QWERTY was introduced in 1873 for the Remington No. 1 typewriter. Its design was influenced by mechanical limitations, primarily to reduce jamming of typebars. The layout arranged commonly used letters apart to slow down typing just enough to prevent jams.\nAlternative Layouts I researched several alternative layouts:\nDvorak (1930): Designed to increase typing speed and reduce finger movement. Colemak (2006): Aims to retain many QWERTY shortcuts while placing common letters on the home row. Workman (2010): Focuses on reducing lateral finger movements and finger strain. Engram (2016): An ergonomic layout optimized using computer algorithms. I ended up trying a slightly altered version of Engram by Sunak. It places less-used characters like 'Z' and 'Q' on the little finger. You can find Sunak's review and layout article here.\nMy Typing Progress Here's how my typing speed progressed:\nWeek 1: 15 WPM Week 2: 25 WPM Week 3: 30 WPM Week 4: 35 WPM After a few months, I can now touch type at around 65 WPM and have started working on increasing my speed again.\nLast Thoughts I'm thrilled with the change. Since switching, I haven't experienced any wrist pain or fatigue, and typing has become fun again.\nOne last thing: when I got my split keyboard and changed layouts, I also decided to switch to Vim. Learning a new layout and Vim simultaneously was challenging and slowed me down initially. However, now that I'm past the learning curve, it was a great decision, and I love the shortcuts and skills I've gained.\n",
      "content_html": "\u003ch1\u003eExploring Ergonomic Split Keyboards: My Journey with the Glove 80\u003c/h1\u003e\n\u003cp\u003eOver the last few months, I started to look into ergonomic split keyboards and a few keyboards kept coming up:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eKinesis Advantage 360\u003c/li\u003e\n  \u003cli\u003eGlove 80\u003c/li\u003e\n  \u003cli\u003eZSA Moonlander\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eWhy Though?\u003c/h2\u003e\n\u003cp\u003eAs a self-employed plumber who also works as a software engineer, I began noticing fatigue in my wrists. After a decade of repetitive movements like using screwdrivers, I started to worry about carpal tunnel syndrome (CTS). I researched ways to prevent this because I really enjoy my job and wanted to plan for longevity. I came across an article that seems to corroborate this:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.ncbi.nlm.nih.gov/entrez/query.fcgi?DB=pubmed\"\u003ePubMed research on ergonomic keyboards\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe research suggests that fixed-split ergonomic keyboards can reduce pain and the likelihood of developing musculoskeletal disorders in typists over extended use. It seems that the forced position of a normal keyboard can increase muscle strain, whereas an ergonomic or split ergonomic keyboard can alleviate this.\u003c/p\u003e\n\u003ch2\u003eGlove 80\u003c/h2\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/glove80BEV.jpeg\"\n  alt=\"Glove 80 top view\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eThe Glove 80 caught my eye. They kind of look like goalkeeper gloves to me every time I take a step back and look at them.\u003c/p\u003e\n\u003cp\u003eI decided on the Glove 80 because of its excellent reviews. Some complaints mentioned they're better suited for larger hands, which worked in my favor as I was worried about the opposite.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/glove80Side.jpeg\"\n  alt=\"Glove 80 side view\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eIt has a natural curve and feels incredibly comfortable. You can even 'tent' it, raising the legs to a 45-degree angle, a 90-degree angle, or attach it to your chair with accessories.\u003c/p\u003e\n\u003ch2\u003eCost\u003c/h2\u003e\n\u003cp\u003eThe Glove 80 is fairly expensive, costing me £322. However, you pay for what you get, and can you put a price on your health? As a plumber, I always bought high-quality tools, and this keyboard feels well-made. It has reignited my enjoyment of typing and motivated me to relearn touch typing.\u003c/p\u003e\n\u003cp\u003eIt comes in two colors (white or dark gray) and offers 4 key choices:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eKailh Choc v1 Brown Tactile\u003c/li\u003e\n  \u003cli\u003eKailh Choc v1 Red Linear 50gf\u003c/li\u003e\n  \u003cli\u003eKailh Choc v1 Red Pro Linear 35gf\u003c/li\u003e\n  \u003cli\u003eKailh Choc v1 White clicky\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can also order one with unsoldered keys if you have soldering experience and prefer custom keys.\u003c/p\u003e\n\u003ch2\u003eQWERTY \u0026 Engram\u003c/h2\u003e\n\u003cp\u003eThis is where I probably messed up a little. After 20 years of using QWERTY, I decided to explore alternative layouts while switching keyboards.\u003c/p\u003e\n\u003ch3\u003eWhy is QWERTY the way it is?\u003c/h3\u003e\n\u003cp\u003eQWERTY was introduced in 1873 for the Remington No. 1 typewriter. Its design was influenced by mechanical limitations, primarily to reduce jamming of typebars. The layout arranged commonly used letters apart to slow down typing just enough to prevent jams.\u003c/p\u003e\n\u003ch3\u003eAlternative Layouts\u003c/h3\u003e\n\u003cp\u003eI researched several alternative layouts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003eDvorak (1930):\u003c/strong\u003e Designed to increase typing speed and reduce finger movement.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eColemak (2006):\u003c/strong\u003e Aims to retain many QWERTY shortcuts while placing common letters on the home row.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eWorkman (2010):\u003c/strong\u003e Focuses on reducing lateral finger movements and finger strain.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eEngram (2016):\u003c/strong\u003e An ergonomic layout optimized using computer algorithms.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI ended up trying a slightly altered version of Engram by Sunak. It places less-used characters like 'Z' and 'Q' on the little finger. You can find Sunak's review and layout article \u003ca href=\"https://sunaku.github.io/moergo-glove80-keyboard.html#lower-layer\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/EngramLayout.png\"\n  alt=\"Credit to Sunak for the image, check his layout guide here and why he made the choices in the design\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003ch2\u003eMy Typing Progress\u003c/h2\u003e\n\u003cp\u003eHere's how my typing speed progressed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eWeek 1: 15 WPM\u003c/li\u003e\n  \u003cli\u003eWeek 2: 25 WPM\u003c/li\u003e\n  \u003cli\u003eWeek 3: 30 WPM\u003c/li\u003e\n  \u003cli\u003eWeek 4: 35 WPM\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter a few months, I can now touch type at around 65 WPM and have started working on increasing my speed again.\u003c/p\u003e\n\u003ch2\u003eLast Thoughts\u003c/h2\u003e\n\u003cp\u003eI'm thrilled with the change. Since switching, I haven't experienced any wrist pain or fatigue, and typing has become fun again.\u003c/p\u003e\n\u003cp\u003eOne last thing: when I got my split keyboard and changed layouts, I also decided to switch to Vim. Learning a new layout and Vim simultaneously was challenging and slowed me down initially. However, now that I'm past the learning curve, it was a great decision, and I love the shortcuts and skills I've gained.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/mentionedVimMeme.jpg\"\n  alt=\"I\u0026amp;rsquo;ll leave you with this\u0026amp;hellip;\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/two-keyboards/",
      "date_published": "24066-24-09T60:2424:00+00:00",
      "date_modified": "24066-24-09T60:2424:00+00:00",
      "author": {
        "name": "Kyle McAndrew",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "eaf877e1b12f8bd6121622116a1163b702f155b1",
      "title": "Backend website architecture",
      "summary": "",
      "content_text": "I always like to work on projects that achieve multiple goals. Since I want to focus on backend and cloud development for the next few months, I decided to create a real-world application that I'll actually use. This led me to build a comprehensive plumbing website using the following technologies:\nReact with Next.js TypeScript Tailwind CSS AWS (Amazon Web Services) Go (Golang) Having already created a straightforward plumbing website, I wanted version 2 to focus on automating as much of the process as possible, from booking to job completion.\nHaving already created a straightforward plumbing website, I wanted version 2 to focus on automating as much of the process as possible, from booking to job completion.\nI\u0026rsquo;ve created an MVP (Minimum Viable Product) architecture diagram, but I have many more ideas to implement. My focus is on getting the core functionality up and running, then iteratively adding new features in an agile manner.\nHow the MVP is Designed Form Submission: The user submits a form, triggering a Lambda function that processes the data and stores it in a database. Calendar Integration (Challenge): The trickier part involves syncing available booking times with my phone's calendar. The idea is that events added to my Google Calendar will trigger a Lambda function to update the database, blocking off those times for bookings. Additional Features Frontend Postcode Checker: A postcode radius checker on the frontend will determine if a user's location is within the service area. This will be implemented using a JSON-based hash map for fast (O(1)) lookups, ensuring a smooth user experience. Dynamic Booking Calendar: After passing the postcode check, users will see a calendar displaying available booking times fetched from the backend. This gives me granular control over the days and times offered for each service. Mobile Calendar Integration The more complex aspect is integrating this functionality with my mobile calendar. Adding an event to my Google Calendar should automatically update the database, blocking off those times for bookings.\nThe Road Ahead I have many more features in mind, but I prefer to start with an MVP, tackling smaller tasks and gradually adding complexity once the core application is functional.\nIf anybody has implemented anything similar with google calender would be interesting to hear.\n",
      "content_html": "\u003cp\u003eI always like to work on projects that achieve multiple goals. Since I want to focus on backend and cloud development for the next few months, I decided to create a real-world application that I'll actually use. This led me to build a comprehensive plumbing website using the following technologies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReact with Next.js\u003c/li\u003e\n\u003cli\u003eTypeScript\u003c/li\u003e\n\u003cli\u003eTailwind CSS\u003c/li\u003e\n\u003cli\u003eAWS (Amazon Web Services)\u003c/li\u003e\n\u003cli\u003eGo (Golang)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHaving already created a straightforward plumbing website, I wanted version 2 to focus on automating as much of the process as possible, from booking to job completion.\u003c/p\u003e\n\u003cp\u003eHaving already created a straightforward plumbing website, I wanted version 2 to focus on automating as much of the process as possible, from booking to job completion.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve created an MVP (Minimum Viable Product) architecture diagram, but I have many more ideas to implement. My focus is on getting the core functionality up and running, then iteratively adding new features in an agile manner.\u003c/p\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/heating-medics-be-arc.svg\"\n  alt=\"planned mvp digram\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003ch2\u003eHow the MVP is Designed\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eForm Submission:\u003c/b\u003e The user submits a form, triggering a Lambda function that processes the data and stores it in a database.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eCalendar Integration (Challenge):\u003c/b\u003e The trickier part involves syncing available booking times with my phone's calendar. The idea is that events added to my Google Calendar will trigger a Lambda function to update the database, blocking off those times for bookings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eAdditional Features\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eFrontend Postcode Checker:\u003c/b\u003e A postcode radius checker on the frontend will determine if a user's location is within the service area. This will be implemented using a JSON-based hash map for fast (O(1)) lookups, ensuring a smooth user experience.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eDynamic Booking Calendar:\u003c/b\u003e After passing the postcode check, users will see a calendar displaying available booking times fetched from the backend. This gives me granular control over the days and times offered for each service.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eMobile Calendar Integration\u003c/h2\u003e\n\u003cp\u003eThe more complex aspect is integrating this functionality with my mobile calendar. Adding an event to my Google Calendar should automatically update the database, blocking off those times for bookings.\u003c/p\u003e\n\u003ch2\u003eThe Road Ahead\u003c/h2\u003e\n\u003cp\u003eI have many more features in mind, but I prefer to start with an MVP, tackling smaller tasks and gradually adding complexity once the core application is functional.\u003c/p\u003e\n\u003cp\u003eIf anybody has implemented anything similar with google calender would be interesting to hear.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/website-be-architecture/",
      "date_published": "21056-21-09T50:2121:00+00:00",
      "date_modified": "21056-21-09T50:2121:00+00:00",
      "author": {
        "name": "Kyle McAndrew",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "308da03c90c69a715170163f4787d019b00be2e0",
      "title": "Binary Search",
      "summary": "",
      "content_text": "I\u0026rsquo;ve been learning algorithms for a while and it\u0026rsquo;s part of my constant learning goal for the year and i have commited to atleast 100 posts on this page so this next one i have done on binary search.\nEver searched through a massive phone book for a name starting with \u0026lsquo;K\u0026rsquo;? Yeah probably not if your still in your 20\u0026rsquo;s! Anyway you’ll have to imagine it. Instead of starting at the beginning, you\u0026rsquo;d likely flip to the middle. This is the essence of a binary search.\nWe keep halving the data until we find our target. If we land on \u0026lsquo;L\u0026rsquo;, we know \u0026lsquo;K\u0026rsquo; must be to the left, instantly discarding half the phone book. We halve again, find our section, and bam! – only 25% of the original data remains after just two steps. Compare this to a linear search, where you\u0026rsquo;d check every name, potentially going through the entire phone book.\nThink of it like a number guessing game with numbers 1 to 10.\nTo minimize guesses, you start with 5 or 6\ninstantly reducing the possibilities by half. Say your next guess is 3, and I say \u0026ldquo;lower.\u0026rdquo; You now only have to worry about 1-3.\nOne more guess (2), and you nail it.\nIt took 4 guesses for 10 numbers, which might seem unimpressive. But scale it up:\n100 numbers: 7 guesses 1000 numbers: 10 guesses 100,000 numbers: Only 17 guesses! Notice how even doubling the input (100,000 to 200,000) only needs one extra guess! A linear search gets linearly slower as the input grows.\nThis efficiency is expressed in Big O notation:\nBinary search: O(log n) - logarithmic growth Linear search: O(n) – growth directly tied to input size Brief explanation on logarithms\u0026hellip; This is taken from a book i\u0026rsquo;m working through called \u0026lsquo;Grokking algorithms\u0026rsquo; by Aditya Y. Bhargava which i would recommend if DSA interests you and you don\u0026rsquo;t know where to start.\nYou may not remember what logarithms are, but you probably know what exponentials are. log10 100 is like asking “How many 10s do we multiply together to get 100?” The answer is 2: 10 x 10. So log10 100 = 2. Logs are the inverse of exponentials.\n10² = 100 ↔ log10 100 = 2\n10³ = 1000 ↔ log10 1000 = 3\n2³ = 8↔ log2 8= 3\n2⁴ = 16 ↔ log2 16 = 4\n2⁵ = 32 ↔ log2 32 = 5\nLogs are the inverse of exponentials.\nWorst-case scenario is what matters Worst-case scenario is what matters in Big O notation, for example if n = 100 there are 100 possibilities and there is nothing stopping us finding it on attempt 1 of 100 and that iteration would in theory be O(1) however we use worst case to determine speeds but it is occasionally possible for a O(n) to out perform a O(log n).\nBinary search can only be used on sorted data because of the nature of how it searches so there is added time complexities behind the scenes for sorting the data that should be accounted for.\nSome real-world use cases for binary search: Databases and range queries Isolating faults in a complex system, by testing the midpoint of a process it can eliminate half very quickly. The ‘middle out’ compression algorithm by Pied Piper 👀 \u0026hellip;Ok, I’m sure it would have been. ",
      "content_html": "\u003cp\u003eI\u0026rsquo;ve been learning algorithms for a while and it\u0026rsquo;s part of my constant learning goal for the year and i have commited to atleast 100 posts on this page so this next one i have done on binary search.\u003c/p\u003e\n\u003cp\u003eEver searched through a massive phone book for a name starting with \u0026lsquo;K\u0026rsquo;? Yeah probably not if your still in your 20\u0026rsquo;s! Anyway you’ll have to imagine it. Instead of starting at the beginning, you\u0026rsquo;d likely flip to the middle. This is the essence of a binary search.\u003c/p\u003e\n\u003cp\u003eWe keep halving the data until we find our target. If we land on \u0026lsquo;L\u0026rsquo;, we know \u0026lsquo;K\u0026rsquo; must be to the left, instantly discarding half the phone book. We halve again, find our section, and bam! – only 25% of the original data remains after just two steps. Compare this to a linear search, where you\u0026rsquo;d check every name, potentially going through the entire phone book.\u003c/p\u003e\n\u003cbr\u003e\n\u003cp\u003eThink of it like a number guessing game with numbers 1 to 10.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/1to10.png\"\n  alt=\"10 sorted ints\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eTo minimize guesses, you start with 5 or 6\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/1to5.png\"\n  alt=\"5 sorted ints\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003einstantly reducing the possibilities by half. Say your next guess is 3, and I say \u0026ldquo;lower.\u0026rdquo; You now only have to worry about 1-3.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/1to3.png\"\n  alt=\"3 sorted ints\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eOne more guess (2), and you nail it.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"/images/2withCrown.png\"\n  alt=\"2 is king\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eIt took 4 guesses for 10 numbers, which might seem unimpressive. But scale it up:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e100 numbers: 7 guesses\u003c/li\u003e\n\u003cli\u003e1000 numbers: 10 guesses\u003c/li\u003e\n\u003cli\u003e100,000 numbers: Only 17 guesses!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNotice how even doubling the input (100,000 to 200,000) only needs one extra guess! A linear search gets linearly slower as the input grows.\u003c/p\u003e\n\u003cp\u003eThis efficiency is expressed in Big O notation:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBinary search: O(log n) - logarithmic growth\u003c/li\u003e\n\u003cli\u003eLinear search: O(n) – growth directly tied to input size\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003ch3 id=\"brief-explanation-on-logarithms\"\u003eBrief explanation on logarithms\u0026hellip;\u003c/h3\u003e\n\u003cp\u003eThis is taken from a book i\u0026rsquo;m working through called \u0026lsquo;Grokking algorithms\u0026rsquo; by Aditya Y. Bhargava which i would recommend if DSA interests you and you don\u0026rsquo;t know where to start.\u003c/p\u003e\n\u003cp\u003eYou may not remember what logarithms are, but you probably know what exponentials are. log10 100 is like asking “How many 10s do we multiply together to get 100?” The answer is 2: 10 x 10. So log10 100 = 2. Logs are the inverse of exponentials.\u003c/p\u003e\n\u003cp\u003e10² = 100 ↔ log10 100 = 2\u003cbr\u003e\n10³ = 1000 ↔ log10 1000 = 3\u003cbr\u003e\n2³ = 8↔ log2 8= 3\u003cbr\u003e\n2⁴ = 16 ↔ log2 16 = 4\u003cbr\u003e\n2⁵ = 32 ↔ log2 32 = 5\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLogs are the inverse of exponentials.\u003c/strong\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"worst-case-scenario-is-what-matters\"\u003eWorst-case scenario is what matters\u003c/h3\u003e\n\u003cp\u003eWorst-case scenario is what matters in Big O notation, for example if n = 100 there are 100 possibilities and there is nothing stopping us finding it on attempt 1 of 100 and that iteration would in theory be O(1) however we use worst case to determine speeds but it is occasionally possible for a O(n) to out perform a O(log n).\u003c/p\u003e\n\u003cp\u003eBinary search can only be used on sorted data because of the nature of how it searches so there is added time complexities behind the scenes for sorting the data that should be accounted for.\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"some-real-world-use-cases-for-binary-search\"\u003eSome real-world use cases for binary search:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDatabases and range queries\u003c/li\u003e\n\u003cli\u003eIsolating faults in a complex system, by testing the midpoint of a process it can eliminate half very quickly.\u003c/li\u003e\n\u003cli\u003eThe ‘middle out’ compression algorithm by Pied Piper 👀 \u0026hellip;Ok, I’m sure it would have been.\u003c/li\u003e\n\u003c/ul\u003e\n",
      "url": "http://localhost:1313/posts/binary-search/",
      "date_published": "22046-22-09T40:2222:00+00:00",
      "date_modified": "22046-22-09T40:2222:00+00:00",
      "author": {
        "name": "Kyle McAndrew",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "2b2f6fa0ee9f1d645e56867efc0d818c5c50b970",
      "title": "Beginners journey to the cloud",
      "summary": "",
      "content_text": "I have wrote this as a beginner in using cloud services, my intention is to improve my writing skills, hold myself accountable and to be able to look back on my growth in the future. Therefore it is far from perfect it\u0026rsquo;s harder to write than i imagined, if anybody has some resources on helping to write be it technical documentation or articles and books on brainstorming and formatting then please do share.\nBytes \u0026amp; bits What\u0026rsquo;s a Bit? Imagine a lightbulb: it\u0026rsquo;s either on (1) or off (0). This binary choice represents the most basic unit of data in computing, known as a bit.\nAnd a Byte? A byte combines 8 of these bits (e.g., 01001000). With each bit having 2 possible states, a byte offers 2^8 (256) possible combinations, forming the basis of digital language.\nI’m now going to try and explain a VPC at a high level using an analogy, let\u0026rsquo;s see how this goes.\nInternet Gateway (IGW) Think of the internet as a vast network of roads. Entering a private cloud network (VPC) from this expansive network requires passing through a security checkpoint—the Internet Gateway (IGW). This IGW acts much like a guard, scrutinizing the source and destination of data packets to ensure they comply with the security standards of the VPC. It\u0026rsquo;s this meticulous check that keeps our digital gated community safe and connected.\nThis could be seen like the following.\nYou pull off the main road (internet) and go down a private road, pulling up to a security booth where you\u0026rsquo;re greeted by a guard. This guard does a few checks before giving you any access. In the world of cloud computing, this guard is the Internet Gateway (IGW), a critical checkpoint that controls the flow of parcels (data packets) between the gated community (VPC) and the world outside (the internet).\nThe guard checks the labels (source and destination IP addresses) on your parcel to ensure it\u0026rsquo;s destined for an address within the community and that it has the right permissions to enter. If everything checks out, the gate swings open, and you\u0026rsquo;re allowed to proceed along the private roads (network paths) inside the gated community to deliver your parcel.\nHowever, if you\u0026rsquo;re a resident trying to send a parcel out into the world, the guard (IGW) plays an equally crucial role. They ensure your parcel is safely handed off to the postal service on the main road, making sure it reaches its destination anywhere in the world. This process is seamless, providing a secure and controlled way for information to move in and out of the gated community, ensuring the safety and privacy of its residents.\nVPC (Virtual Private Cloud) A VPC is a private cloud environment that we use to host and protect our services. This is a nice gated community so it costs, you pay for the security and features provided. We have the correct identification to allow us into the complex so they let us in and send us to the correct building for our parcel delivery which is addressed to a certain building within the complex.\nCIDR Block (Classless Inter-Domain Routing Block) Let\u0026rsquo;s say the address for the VPC location is ‘AWS Complex 10.0.1.0/16’ – this is called the CIDR block, and I\u0026rsquo;ll try to explain it below. Upon entering the AWS cloud complex, ready to deliver your parcel, you encounter its unique addressing system. Unlike traditional street addresses, this complex uses a special layout for naming its buildings—think \u0026ldquo;Ivy Cottage\u0026rdquo; or \u0026ldquo;The Stables\u0026rdquo;. This unique layout is defined by what\u0026rsquo;s known as a CIDR block. It\u0026rsquo;s like the architectural blueprint of the complex, detailing how addresses are allocated and the total number of buildings it can accommodate. A CIDR block sets the boundaries for all possible addresses within the complex, ensuring each building has its own distinct location for precise delivery.\nUnderstanding IP Addresses An IPv4 address is made up of 4 bytes and would look something like this: 192.168.1.0 Using an IPv4 address of 192.168.1.0, we can picture this as an address we would use for our house: Full address: 192.168.1.0 192.168 could be the area, like Manchester, Didsbury 1.0 represents the specific building and apartment number We have our address for AWS Complex 10.0.0.0/16 \u0026hellip;.wait, you said it\u0026rsquo;s 4 bytes and you\u0026rsquo;ve thrown a /16 at me! What is this?!?! Don\u0026rsquo;t panic! This is just a way of organising the unique IP addresses (or house locations), and it\u0026rsquo;s actually simple how we work it out. If we have 10.0.0\nMy intention is this gives an insight into the very basic understanding, and maybe i can use it as a refresher if i ever forget for a high level overview.\nThank You\n",
      "content_html": "\u003cp\u003eI have wrote this as a beginner in using cloud services, my intention is to improve my writing skills, hold myself accountable and to be able to look back on my growth in the future. Therefore it is far from perfect it\u0026rsquo;s harder to write than i imagined, if anybody has some resources on helping to write be it technical documentation or articles and books on brainstorming and formatting then please do share.\u003c/p\u003e\n\u003ch2 id=\"bytes--bits\"\u003eBytes \u0026amp; bits\u003c/h2\u003e\n\u003ch3 id=\"whats-a-bit\"\u003eWhat\u0026rsquo;s a Bit?\u003c/h3\u003e\n\u003cp\u003eImagine a lightbulb: it\u0026rsquo;s either on (1) or off (0). This binary choice represents the most basic unit of data in computing, known as a bit.\u003c/p\u003e\n\u003ch3 id=\"and-a-byte\"\u003eAnd a Byte?\u003c/h3\u003e\n\u003cp\u003eA byte combines 8 of these bits (e.g., 01001000). With each bit having 2 possible states, a byte offers 2^8 (256) possible combinations, forming the basis of digital language.\u003c/p\u003e\n\u003cp\u003eI’m now going to try and explain a VPC at a high level using an analogy, let\u0026rsquo;s see how this goes.\u003c/p\u003e\n\u003ch3 id=\"internet-gateway-igw\"\u003eInternet Gateway (IGW)\u003c/h3\u003e\n\u003cp\u003eThink of the internet as a vast network of roads. Entering a private cloud network (VPC) from this expansive network requires passing through a security checkpoint—the Internet Gateway (IGW). This IGW acts much like a guard, scrutinizing the source and destination of data packets to ensure they comply with the security standards of the VPC. It\u0026rsquo;s this meticulous check that keeps our digital gated community safe and connected.\u003c/p\u003e\n\u003cp\u003eThis could be seen like the following.\u003c/p\u003e\n\u003cp\u003eYou pull off the main road (internet) and go down a private road, pulling up to a security booth where you\u0026rsquo;re greeted by a guard. This guard does a few checks before giving you any access. In the world of cloud computing, this guard is the Internet Gateway (IGW), a critical checkpoint that controls the flow of parcels (data packets) between the gated community (VPC) and the world outside (the internet).\u003c/p\u003e\n\u003cp\u003eThe guard checks the labels (source and destination IP addresses) on your parcel to ensure it\u0026rsquo;s destined for an address within the community and that it has the right permissions to enter. If everything checks out, the gate swings open, and you\u0026rsquo;re allowed to proceed along the private roads (network paths) inside the gated community to deliver your parcel.\u003c/p\u003e\n\u003cp\u003eHowever, if you\u0026rsquo;re a resident trying to send a parcel out into the world, the guard (IGW) plays an equally crucial role. They ensure your parcel is safely handed off to the postal service on the main road, making sure it reaches its destination anywhere in the world. This process is seamless, providing a secure and controlled way for information to move in and out of the gated community, ensuring the safety and privacy of its residents.\u003c/p\u003e\n\u003ch3 id=\"vpc-virtual-private-cloud\"\u003eVPC (Virtual Private Cloud)\u003c/h3\u003e\n\u003cp\u003eA VPC is a private cloud environment that we use to host and protect our services. This is a nice gated community so it costs, you pay for the security and features provided. We have the correct identification to allow us into the complex so they let us in and send us to the correct building for our parcel delivery which is addressed to a certain building within the complex.\u003c/p\u003e\n\u003ch3 id=\"cidr-block-classless-inter-domain-routing-block\"\u003eCIDR Block (Classless Inter-Domain Routing Block)\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s say the address for the VPC location is ‘AWS Complex 10.0.1.0/16’ – this is called the CIDR block, and I\u0026rsquo;ll try to explain it below. Upon entering the AWS cloud complex, ready to deliver your parcel, you encounter its unique addressing system. Unlike traditional street addresses, this complex uses a special layout for naming its buildings—think \u0026ldquo;Ivy Cottage\u0026rdquo; or \u0026ldquo;The Stables\u0026rdquo;. This unique layout is defined by what\u0026rsquo;s known as a CIDR block. It\u0026rsquo;s like the architectural blueprint of the complex, detailing how addresses are allocated and the total number of buildings it can accommodate. A CIDR block sets the boundaries for all possible addresses within the complex, ensuring each building has its own distinct location for precise delivery.\u003c/p\u003e\n\u003ch3 id=\"understanding-ip-addresses\"\u003eUnderstanding IP Addresses\u003c/h3\u003e\n\u003cp\u003eAn IPv4 address is made up of 4 bytes and would look something like this: 192.168.1.0 Using an IPv4 address of 192.168.1.0, we can picture this as an address we would use for our house: Full address: 192.168.1.0 192.168 could be the area, like Manchester, Didsbury 1.0 represents the specific building and apartment number We have our address for AWS Complex 10.0.0.0/16 \u0026hellip;.wait, you said it\u0026rsquo;s 4 bytes and you\u0026rsquo;ve thrown a /16 at me! What is this?!?! Don\u0026rsquo;t panic! This is just a way of organising the unique IP addresses (or house locations), and it\u0026rsquo;s actually simple how we work it out. If we have 10.0.0\u003c/p\u003e\n\u003cp\u003eMy intention is this gives an insight into the very basic understanding, and maybe i can use it as a refresher if i ever forget for a high level overview.\u003c/p\u003e\n\u003cp\u003eThank You\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/a-beginners-intro-to-the-cloud/",
      "date_published": "2046-02-09T40:22:00+00:00",
      "date_modified": "2046-02-09T40:22:00+00:00",
      "author": {
        "name": "Kyle McAndrew",
        "url": "http://localhost:1313/"
      }
    }
    
  ]
}